{"version":3,"sources":["components/TacticBoard.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Chess","require","makeMove","fen","move","chess","fullMove","validateMove","solution","length","next","san","slice","TacticBoard","tactic","onIncorrect","onSolve","useState","setFen","turn","getSideToPlayFromFen","orientation","setSolution","useEffect","setTimeout","blunderMove","transitionDuration","position","width","onDrop","autoNext","handleMove","from","sourceSquare","to","targetSquare","promotion","fetchTactic","a","axios","post","process","REACT_APP_CHESSBLUNDERS_API","type","res","data","id","fenBefore","forcedLine","App","loading","setLoading","setTactic","loadTactic","console","log","error","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.63224da5.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { ChessInstance, ShortMove } from \"chess.js\";\nimport Chessboard from \"chessboardjsx\";\nimport Tactic from \"../types/Tactic\";\n\nconst Chess = require(\"chess.js\");\n\ninterface Props {\n  tactic: Tactic;\n  onIncorrect: () => void;\n  onSolve: () => void;\n}\n\nconst TacticBoard: React.FC<Props> = ({ tactic, onIncorrect, onSolve }) => {\n  const [fen, setFen] = useState(tactic.fen);\n  const [orientation] = useState(getSideToPlayFromFen(tactic.fen));\n  const [solution, setSolution] = useState(tactic.solution);\n\n  useEffect(() => {\n    setTimeout(() => {\n      const next = makeMove(tactic.fen, tactic.blunderMove);\n      if (next) {\n        setFen(next.fen);\n      }\n    }, 100);\n  }, [tactic]);\n\n  const handleMove = (move: string | ShortMove) => {\n    const next = validateMove(fen, move, solution);\n\n    if (next) {\n      setFen(next.fen);\n      setSolution(next.solution);\n\n      if (next.solution.length > 0) {\n        const autoNext = validateMove(\n          next.fen,\n          next.solution[0],\n          next.solution\n        );\n\n        if (autoNext) {\n          setFen(autoNext.fen);\n          setSolution(autoNext.solution);\n        }\n      } else {\n        onSolve();\n      }\n    } else {\n      onIncorrect();\n    }\n  };\n\n  return (\n    <Chessboard\n      transitionDuration={200}\n      position={fen}\n      width={400}\n      orientation={orientation === \"b\" ? \"white\" : \"black\"}\n      onDrop={(move) =>\n        handleMove({\n          from: move.sourceSquare,\n          to: move.targetSquare,\n          promotion: \"q\",\n        })\n      }\n    />\n  );\n};\n\nfunction getSideToPlayFromFen(fen: string) {\n  const chess: ChessInstance = new Chess(fen);\n  return chess.turn();\n}\n\nfunction makeMove(fen: string, move: ShortMove | string) {\n  const chess: ChessInstance = new Chess(fen);\n  const fullMove = chess.move(move);\n  return fullMove ? { fullMove, fen: chess.fen() } : null;\n}\n\nfunction validateMove(\n  fen: string,\n  move: ShortMove | string,\n  solution: string[]\n): null | { solution: string[]; fen: string } {\n  if (solution.length === 0) {\n    return null;\n  }\n\n  const next = makeMove(fen, move);\n\n  if (next && next.fullMove.san === solution[0]) {\n    return {\n      fen: next.fen,\n      solution: solution.slice(1),\n    };\n  }\n\n  return null;\n}\n\nexport default TacticBoard;\n","import \"./App.css\";\nimport { useEffect, useState } from \"react\";\nimport Tactic from \"./types/Tactic\";\nimport TacticBoard from \"./components/TacticBoard\";\nimport axios from \"axios\";\n\nfunction App() {\n  const [loading, setLoading] = useState(true);\n  const [tactic, setTactic] = useState<Tactic>({\n    id: \"start\",\n    fen: \"start\",\n    blunderMove: \"e4\",\n    solution: [\"e5\"],\n  });\n\n  const loadTactic = async () => {\n    try {\n      setLoading(true);\n      setTactic(await fetchTactic());\n    } catch (error) {\n      console.log(\"Error loading tactic\", { error });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    loadTactic();\n  }, []);\n\n  return (\n    <div className=\"flex-center\">\n      <h1>Tactics Trainer</h1>\n      <TacticBoard\n        key={tactic.id}\n        tactic={tactic}\n        onIncorrect={() => console.log(\"Incorrect\")}\n        onSolve={() => loadTactic()}\n      />\n      {loading && <div className=\"overlay-loading\">Loading...</div>}\n    </div>\n  );\n}\n\nasync function fetchTactic() {\n  const res = await axios.post(\n    `${process.env.REACT_APP_CHESSBLUNDERS_API}/blunder/get`,\n    {\n      type: \"explore\",\n    }\n  );\n\n  const data = res.data.data;\n\n  return {\n    id: data.id,\n    fen: data.fenBefore,\n    blunderMove: data.blunderMove,\n    solution: data.forcedLine,\n  };\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}